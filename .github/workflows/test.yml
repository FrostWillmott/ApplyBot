name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_applybot
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: |
        poetry install --with dev

    - name: Run linting
      run: |
        poetry run ruff check app tests
        poetry run mypy app

    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ -v

    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/ -v
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_applybot
        REDIS_URL: redis://localhost:6379/0

    - name: Run security tests
      run: |
        poetry run pytest tests/security/ -v

    - name: Generate coverage report
      run: |
        poetry run pytest tests/ --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  performance:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run performance tests
      run: |
        poetry run pytest tests/performance/ -v --timeout=60

  e2e:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run E2E tests
      run: |
        poetry run pytest tests/e2e/ -v --timeout=120
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        HH_CLIENT_ID: ${{ secrets.HH_CLIENT_ID }}
        HH_CLIENT_SECRET: ${{ secrets.HH_CLIENT_SECRET }}
""".return_value = mock_client_instance

        with patch("app.routers.auth.TokenStorage.save") as mock_save:
            mock_save.return_value = AsyncMock()
            
            response = test_client.get(
                "/auth/callback?code=test_code&state=test_state"
            )

        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "ok"